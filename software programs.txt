1)
.MODEL SMALL
.DATA
ARR DW 1,2,3,4,5,6,7
LEN DW ($-ARR)/2
MSG1 DB "KEY IS FOUND$"
MSG2 DB "KEY IS NOT FOUND$"
X DW 6
.CODE
MOV AX,@DATA
MOV DS,AX
MOV SI,0000H
MOV DI,LEN
ADD DI,DI
SUB DI,2
RPT :CMP SI,DI
JA KNF
MOV AX,X
MOV BX,SI
ADD BX,DI
SHR BX,1
CMP AX,ARR[BX]
JE KF
JB NEXT
MOV SI,BX
ADD SI,2
JMP RPT
NEXT: MOV DI,BX
      SUB DI,2
      JMP RPT
 KF:LEA DX,MSG1
 MOV AH,09H
 INT 21H
 JMP EXIT
 KNF:LEA DX,MSG2
 MOV AH,09H
 INT 21H
 EXIT: MOV AH,4CH
 INT 21H
 END
......................................
2)
.MODEL SMALL
.STACK
.DATA
A DB 77,42,35,12,255,05
L DW $-A
.CODE
MOV AX,@DATA
MOV DS,AX
MOV BX,L
DEC BX
NXTPASS: MOV CX,BX
MOV SI,0
NXTCOMP: MOV AL,A[SI]
INC SI
CMP AL,A[SI]
JB NO_EXG

XCHG AL,A[SI]
MOV A[SI-1],AL
NO_EXG:LOOP NXTCOMP
DEC BX
JNZ NXTPASS
MOV AH,4CH
INT 21H
END
...............................................
3)
.model small
.data
str db "GAG"
len equ 11
rstr db 20 dup(?)
msg1 db 10,13, "palli$"
msg2 db 10,13,"not pallis$"
.code
mov ax,@data
mov ds,ax
mov es,ax
mov cx,len
dec cx
mov si,offset str
mov di,offset rstr
add di,cx
inc cx
back:mov al,[si]
     mov [di],al
     inc si
     dec di
     loop back
     mov di,offset rstr
     mov cx,len
disp:mov dl,[di]
     mov ah,02h
     int 21h
     inc di
     loop disp
     mov cx,len
     mov si,offset str
     mov di,offset rstr
     cld
     repe cmpsb
     jz palin
     lea dx,msg2
     jmp exit
 palin:lea dx,msg1
 exit:mov ah,09h
      int 21h
      mov ah,4ch
      int 21h
      end
...............................................
4)
.MODEL SMALL
.DATA
   N DW 6
   R DW 2
   NCR DW 0
   .CODE
   MOV AX,@DATA
   MOV DS,AX
   MOV AX,N
   MOV BX,R
   CALL NCR_PROC
   MOV AH,4CH
   INT 21H
   NCR_PROC PROC
   CMP AX,BX
   JZ N1
   CMP BX,0
   JZ N1
   CMP BX,1
   JZ N2
   MOV CX,AX
   DEC CX
   CMP CX,BX
   JZ N2
   PUSH AX
   PUSH BX
   DEC AX
   CALL NCR_PROC
   POP BX
   POP AX
   DEC AX
   DEC BX
   CALL NCR_PROC
   JMP LAST
   N1:ADD NCR,1
   RET
   N2:ADD NCR,AX
   LAST:RET
   NCR_PROC ENDP
   END
............................................
5)
.MODEL SMALL
.DATA
MSG1 DB "TIME IS$"
MSG2 DB 10,13,"DATA IS$"
.CODE
MOV AX,@DATA
MOV DS,AX
LEA DX,MSG1
MOV AH,09H
INT 21H
MOV AH,2CH
INT 21H
MOV AL,CH
CALL DISPLAY
MOV AL,CL
CALL DISPLAY
MOV AL,DH
CALL DISPLAY
LEA DX,MSG2
MOV AH,09H
INT 21H
MOV AH,2AH
INT 21H
MOV BX,DX
CALL DISPLAY
MOV AL,BL
CALL DISPLAY
MOV AL,BH
CALL DISPLAY
MOV DL,':'
MOV AH,02H
INT 21H
MOV AX,CX
MOV DX,0
MOV BX,10
DIV BX
MOV CL,DL
MOV DX,0
DIV BX
ADD DL,30H
MOV AH,02H
INT 21H
MOV DL,CL
ADD DL,30H
MOV AH,02H
INT 21H
MOV AH,4CH
INT 21H

DISPLAY PROC
PUSH AX
MOV DL,':'
MOV AH,02H
INT 21H
POP AX
AAM
MOV DX,AX
ADD DX,3030H
XCHG DH,DL
MOV AH,02H
INT 21H
MOV DL,DH
MOV AH,02H
INT 21H
RET
DISPLAY ENDP
END
..........................................
6a
AREA PROG1, CODE, READONLY
ENTRY
START
	LDR R2,=5
	LDR R0,=SOURCE
	LDR R1,=DEST
UP LDR R3,[R0],#4
	STR R3, [R1],#4
	SUBS R2,#1
	BNE UP
STOP B STOP 
 AREA SOURCE, DATA, READONLY
	DCD 10,20,30,40,50
 AREA DEST, DATA, READWRITE
	END


6b
AREA PROG2, CODE, READONLY
ENTRY
	LDR R1,=6
	LDR R2,=1
	ADD R5,R1,R2
	SUB R6,R1,R2
	MUL R7,R1,R2
	END

6c
AREA PROG2, CODE, READONLY
ENTRY
	LDR R1,=3
	LDR R2,=4
	AND R3,R1,R2
	ORR R4,R1,R2
	EOR R5,R1,R2

	END  


....................................................................
7b
#include<lpc21xx.H>
int main(){
int a=3;
int b=7;
int and,xor,or,not;
not=~a;
xor=a^b;
and=a&b;
or=a|b;


return 0;
}

7a
#include<lpc21xx.H>
int main(){
int a=3;
int b=7;
int add,sub,mul,div;
add=a+b;
sub=a-b;
mul=a*b;
div=a/b;


return 0;
}
