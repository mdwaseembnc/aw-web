Mpmc 10th prog  fire and help
.MODEL SMALL
.DATA
PB EQU 0D801H
PC EQU 0D802H
CR EQU 0D803H
FIRE DB 86H,88H,0F9H,8EH
HELP DB 8CH,0C7H,86H,89H
.code
MOV AX, @DATA                			 ;
MOV DS, AX                                                   ; DATA segment Initialization
MOV AL, 80H                                                ; Port A, B & C - Output
MOV DX, CR                                                  ;
OUT DX, AL                                                     ; Initialize 8255
MOV CX, 10                                                ; Display FIRE & HELP 10 times
RPT: PUSH CX
LEA SI, FIRE                                               ; Store offset address of message “DATA_fire” IN si
CALL DISPLAY                                          ; Display message “FIRE”
CALL DELAY
LEA SI, HELP                                         ; Store offset address of message “DATA_help” IN si
CALL DISPLAY 				; Display message “HELP”
CALL DELAY
POP CX
LOOP RPT
MOV AH, 4CH
INT 21h 				; Exit to DOS
DELAY PROC
PUSH CX
PUSH BX
MOV CX, 1000H
LOOP2:MOV BX, 0FFFFH
LOOP1:DEC BX
JNZ LOOP1				 ; Repeat INNER loop FFFF times
LOOP LOOP2					 ; Repeat OUTER loop 1000h times
POP BX
POP CX
RET
DELAY ENDP
DISPLAY PROC
MOV BL, 4					 ; Four display codes to be sent
BACK2:MOV CL, 8 					; Eight bits IN each display code
MOV AL, [SI]
BACK1:ROL AL, 1
MOV DX, PB ;
OUT DX, AL				 ; DATA bit sent over PB0
PUSH AX
MOV AL, 1			 ; SEND falling edge of the pulse over PC0
MOV DX, PC ;
OUT DX, AL ;
DEC AL ;
OUT DX, AL ;
POP AX
DEC CL
JNZ BACK1 					; Check if ALl 8 bits are sent or not
INC SI
DEC BL
JNZ BACK2					 ; Check if ALl 4 display codes sent or not
RET
DISPLAY ENDP
END


Mpmc 11 th prog stepper motor

.model small
.data
.code
pa equ 0c800h
pb equ 0c801h
pc equ 0c802h
cr equ 0c803h
count db 10
mov ax,@data
mov ds,ax
mov dx,cr
mov al,80h
out dx,al
mov bh,count
mov al,88h			 ; at a time one coil is selected
up:mov dx,pc
out dx,al
call delay
ror al,1 				; rotate anticlockwise dec bh 
jnz up
mov bh,count
mov dx,pc
mov al,88h
back: out dx,al
call delay
rol al,1					 ; rotate clockwise 
dec bh
jnz back
mov ah,4ch
int 21h
delay proc
push cx
push dx
mov cx,8000h
outloop:mov dx,4000h
inloop: dec dx
jnz inloop
loop outloop
pop dx
pop cx 
ret
delay endp
end







14. 
#include<stdio.h>
#include<LPC214x.h>

void delay(){
unsigned int i,j;
for(i=0;i<0xFF;i++){
for(j=0;j<0xFF;j++);
}
}


int main(){
unsigned int number=0x00;

IO0DIR=0x0000007C;

IO0SET=0x0000007C;

while(1){

IO0CLR=0x0000003C;
IO0SET=IO0SET|(number<<2); 
delay();
delay();

while(IO0PIN & 0x000080000);
while(!(IO0PIN & 0x000080000));
number++;
if(number>9)
{
number=0x00;
}
}

return 0;
}

















15.

#include<LPC214x.h>

unsigned int COUNT=0;

unsigned int j=0;

unsigned int CLOCK[4]={0x00030000, 0x00090000, 0x000C0000, 0x00060000};

unsigned int ANTI_CLOCK[4]={0x00060000, 0x000C0000, 0x00090000,0x00030000};

void DELAY_IS(unsigned int n){
unsigned int i,j;
for(i=1;i<=n;i++)
for(j=0;j<=10000;j++);
}

void CLOCK_WISE_DIRECTION(unsigned int STEP, unsigned int TIME){
for(j=0;j<=STEP;j++){
IO0PIN = CLOCK[COUNT];
COUNT++;
DELAY_IS(TIME);
if(COUNT-=4)
COUNT=0;
}
}

void ANTI_CLOCK_WISE_DIRECTION(unsigned int STEP, unsigned int TIME){
for(j=0;j<=STEP;j++){
IO0PIN = ANTI_CLOCK[COUNT];
COUNT++;
DELAY_IS(TIME); 
if(COUNT==4)
COUNT=0;
}
}


int main(){
IO0PIN=0X000F0000;
while(1){
CLOCK_WISE_DIRECTION(10,500);
ANTI_CLOCK_WISE_DIRECTION(10,500);
}
}
